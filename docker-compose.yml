version: '3.8'

services:
  web:
    container_name: web
    build: .
#    restart: unless-stopped
    command: sh -c python3 manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
#      - staticfiles:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

    env_file:
      - ./.env

  nginx:
    build:
      context: ./nginx
#    restart: unless-stopped # Автоперезапуск при сбоях
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
#      - staticfiles:/app/staticfiles
    depends_on:
      - web

  db:
    container_name: db
    image: postgres:16
#    restart: unless-stopped # Автоперезапуск при сбоях
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    healthcheck: # Проверка работоспособности
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    container_name: redis
    image: redis:7.4
#    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - ./.env
    command: redis-server --save 60 1 --loglevel warning

  celery_worker:
    container_name: celery_worker
    build:
      context: .
    command: celery -A config worker --loglevel info
#    restart: unless-stopped
#    restart: on-failure
    env_file: "./.env"
    depends_on:
      - db
      - redis

  celery_beat:
    container_name: celery_beat
    build:
      context: .
    command: celery -A config beat --loglevel info
    env_file:
      - ./.env
#    restart: unless-stopped
#    restart: on-failure
    depends_on:
      - db
      - redis



volumes:
  postgres_data:
  static_volume:
#  staticfiles:
  redis_data:
