version: '3.8'

services:
  web:
    container_name: web
#    image: ${DOCKER_HUB_USERNAME}/drf_project:${github.sha}
    build: .
#    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    command: bash -c "python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
#      - static_volume:/media
      - staticfiles:/app/static
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env

  db:
    container_name: db
    image: postgres:16
    restart: unless-stopped # Автоперезапуск при сбоях
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    healthcheck: # Проверка работоспособности
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    container_name: redis
    image: redis:7.4
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning

  celery_worker:
    container_name: celery_worker
    build:
      context: .
#    command: celery -A config worker --loglevel=info
    command: celery -A config worker -l INFO
#    restart: on-failure
    env_file: "./.env"
    depends_on:
      - redis
      - db

  celery_beat:
    container_name: celery_beat
    build:
      context: .
    command: celery -A config beat -l INFO
    env_file:
      - ./.env
#    restart: on-failure
    depends_on:
      - redis
      - db

  nginx:
#    image: ${DOCKER_HUB_USERNAME}/nginx:${github.sha}
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - staticfiles:/app/staticfiles
    depends_on:
      web:
        condition: service_healthy

volumes:
  postgres_data:
  staticfiles:
  redis_data:
